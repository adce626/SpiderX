#!/usr/bin/env python3
"""
ุงุฎุชุจุงุฑ SpiderX ุงูุฃุณุทูุฑูุฉ
Test SpiderX Legendary Features

Simple test to validate the legendary filtering and vulnerability detection
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

from spiderx.utils import (
    print_banner, print_info, print_success, print_error,
    detect_potential_vulnerability_params, analyze_parameter_complexity
)
from spiderx.filters import ParameterFilter
from collections import Counter

class TestArgs:
    def __init__(self):
        self.boring_list = None
        self.custom_filter = None
        self.no_filter = False
        self.debug = False
        self.placeholder = 'FUZZ'

def test_legendary_filtering():
    """ุงุฎุชุจุงุฑ ุงูููุชุฑุฉ ุงูุฃุณุทูุฑูุฉ"""
    print_info("ุงุฎุชุจุงุฑ ูุธุงู ุงูููุชุฑุฉ ุงูุฃุณุทูุฑู...")
    
    args = TestArgs()
    filter_obj = ParameterFilter(args)
    
    # ูุนุงููุงุช ุงุฎุชุจุงุฑ ูุชููุนุฉ
    test_urls = [
        "https://example.com/search?q=test&utm_source=google&category=books&sessionid=123",
        "https://api.example.com/users?user_id=456&format=json&api_key=secret&debug=true",
        "https://admin.example.com/panel?admin_key=admin123&page=1&redirect_url=home",
        "https://shop.example.com/product?product_id=789&color=red&ref=facebook&tracking_id=xyz"
    ]
    
    all_params = set()
    for url in test_urls:
        params = filter_obj.extract_parameters(url)
        filtered = filter_obj.filter_parameters(params)
        cleaned = filter_obj.create_cleaned_url(url, filtered, "FUZZ")
        
        all_params.update(params)
        
        print_info(f"ุงูุฑุงุจุท ุงูุฃุตูู: {url}")
        print_info(f"ุงููุนุงููุงุช ุงููุณุชุฎุฑุฌุฉ: {params}")
        print_info(f"ุจุนุฏ ุงูููุชุฑุฉ: {filtered}")
        print_info(f"ุงูุฑุงุจุท ุงูููุธู: {cleaned}")
        print("")
    
    print_success(f"โ ุชู ุงุฎุชุจุงุฑ {len(test_urls)} ุฑูุงุจุท ุจูุฌุงุญ")
    return all_params

def test_vulnerability_detection(params):
    """ุงุฎุชุจุงุฑ ูุดู ุงูุซุบุฑุงุช ุงูุฃูููุฉ"""
    print_info("ุงุฎุชุจุงุฑ ูุดู ุงูุซุบุฑุงุช ุงูุฃูููุฉ...")
    
    # ูุดู ุงููุนุงููุงุช ุงููุญุชููุฉ ููุซุบุฑุงุช
    vuln_findings = detect_potential_vulnerability_params(params)
    
    if vuln_findings:
        print_success("๐จ ุชู ุงูุนุซูุฑ ุนูู ูุนุงููุงุช ูุญุชููุฉ ููุซุบุฑุงุช:")
        for vuln_type, found_params in vuln_findings.items():
            print_info(f"  {vuln_type}: {', '.join(found_params)}")
    else:
        print_info("ูู ูุชู ุงูุนุซูุฑ ุนูู ูุนุงููุงุช ูุดุจููุฉ")
    
    print("")

def test_complexity_analysis(params):
    """ุงุฎุชุจุงุฑ ุชุญููู ุงูุชุนููุฏ"""
    print_info("ุงุฎุชุจุงุฑ ุชุญููู ุชุนููุฏ ุงููุนุงููุงุช...")
    
    complexity_scores = analyze_parameter_complexity(params)
    
    # ุชุฑุชูุจ ุญุณุจ ุงูููุงุท
    sorted_params = sorted(complexity_scores.items(), key=lambda x: x[1], reverse=True)
    
    print_success("๐ฏ ุชุฑุชูุจ ุงููุนุงููุงุช ุญุณุจ ุงูุฃููููุฉ:")
    for param, score in sorted_params[:10]:
        priority = "ุนุงููุฉ" if score >= 5 else "ูุชูุณุทุฉ" if score >= 3 else "ููุฎูุถุฉ"
        print_info(f"  {param}: {score} ููุงุท ({priority})")
    
    print("")

def test_competitive_features():
    """ุงุฎุชุจุงุฑ ุงูููุฒุงุช ุงูุชูุงูุณูุฉ"""
    print_success("๐ ุงุฎุชุจุงุฑ ุงูููุฒุงุช ุงูุชูุงูุณูุฉ ุงูุฃุณุทูุฑูุฉ:")
    
    competitive_features = [
        "โ ูุตุงุฏุฑ ูุชุนุฏุฏุฉ (Wayback + Sitemap + JavaScript)",
        "โ ูุดู ุงูุซุบุฑุงุช ุงูุฃูููุฉ ูู ุงูููุช ุงููุนูู", 
        "โ ุชุญููู ุชุนููุฏ ุงููุนุงููุงุช ููุฃููููุฉ",
        "โ ููุชุฑุฉ ุฐููุฉ ูุน 60+ ูุนุงูู ูููู",
        "โ ุฃุดูุงู ุชุตุฏูุฑ ูุชุนุฏุฏุฉ (TXT, CSV, JSON)",
        "โ ูุนุงูุฌุฉ ุบูุฑ ูุชุฒุงููุฉ ุนุงููุฉ ุงูุฃุฏุงุก",
        "โ ุฅุญุตุงุฆูุงุช ุดุงููุฉ ูููุตูุฉ",
        "โ ูุงุฌูุฉ ุณุทุฑ ุฃูุงูุฑ ุงุญุชุฑุงููุฉ"
    ]
    
    for feature in competitive_features:
        print_info(f"  {feature}")
    
    print("")
    print_success("๐ท๏ธ ุฌููุน ุงูููุฒุงุช ุงูุชูุงูุณูุฉ ุชุนูู ุจูุฌุงุญ!")

def main():
    """ุงููุธููุฉ ุงูุฑุฆูุณูุฉ ููุงุฎุชุจุงุฑ"""
    print_banner()
    print_success("๐ ุจุฏุก ุงุฎุชุจุงุฑ SpiderX ุงูุฃุณุทูุฑูุฉ")
    print("")
    
    try:
        # ุงุฎุชุจุงุฑ ุงูููุชุฑุฉ
        all_params = test_legendary_filtering()
        
        # ุงุฎุชุจุงุฑ ูุดู ุงูุซุบุฑุงุช
        test_vulnerability_detection(all_params)
        
        # ุงุฎุชุจุงุฑ ุชุญููู ุงูุชุนููุฏ
        test_complexity_analysis(all_params)
        
        # ุนุฑุถ ุงูููุฒุงุช ุงูุชูุงูุณูุฉ
        test_competitive_features()
        
        print_success("โจ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ุงูุชููุช ุจูุฌุงุญ!")
        print_info("SpiderX ุฌุงูุฒุฉ ูููุณุญ ุงูุฃุณุทูุฑู!")
        
    except Exception as e:
        print_error(f"ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()